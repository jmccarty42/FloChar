#pragma checksum "C:\Users\rober\OneDrive\Code\Flochar\Pages\treedisplay.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e4ae0cc213a5580c0a98fac9a0ad79c4245f669e"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(FloChar.Pages.Pages_treedisplay), @"mvc.1.0.razor-page", @"/Pages/treedisplay.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute(@"/Pages/treedisplay.cshtml", typeof(FloChar.Pages.Pages_treedisplay), null)]
namespace FloChar.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\rober\OneDrive\Code\Flochar\Pages\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#line 2 "C:\Users\rober\OneDrive\Code\Flochar\Pages\_ViewImports.cshtml"
using FloChar;

#line default
#line hidden
#line 3 "C:\Users\rober\OneDrive\Code\Flochar\Pages\_ViewImports.cshtml"
using FloChar.Data;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e4ae0cc213a5580c0a98fac9a0ad79c4245f669e", @"/Pages/treedisplay.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3f7c422dc10fbcbfae78265390b8e43e9510cdce", @"/Pages/_ViewImports.cshtml")]
    public class Pages_treedisplay : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 3 "C:\Users\rober\OneDrive\Code\Flochar\Pages\treedisplay.cshtml"
  
    ViewData["Title"] = "treedisplay";

#line default
#line hidden
            BeginContext(93, 37, true);
            WriteLiteral("\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n");
            EndContext();
            BeginContext(130, 435, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "796acd9ff17d4096885c94c5b0aa67b4", async() => {
                BeginContext(136, 422, true);
                WriteLiteral(@"
    <meta charset=""utf-8"">

    <title>Collapsible Tree Example</title>

    <style>

        .node circle {
            fill: #fff;
            stroke: rgb(0, 0, 0);
            stroke-width: 3px;
        }

        .node text {
            font: 18px sans-serif;
        }

        .link {
            fill: none;
            stroke: #ccc;
            stroke-width: 2px;
        }
    </style>

");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(565, 4, true);
            WriteLiteral("\r\n\r\n");
            EndContext();
            BeginContext(569, 2100, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "31f152b7d29d41ba91b2bda2372e4924", async() => {
                BeginContext(575, 2087, true);
                WriteLiteral(@"
    <div id=""svgholder""></div>
    <!-- load the d3.js library -->
    <script src=""https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3.min.js""></script>

    <script>

// ************** Generate the tree diagram	 *****************
var margin = {top: 40, right: 120, bottom: 20, left: 120},
	width = 900 - margin.right - margin.left,
	height = 2000 - margin.top - margin.bottom;

var i = 0;

var tree = d3.layout.tree()
	.size([width, height]);

var diagonal = d3.svg.diagonal()
	.projection(function(d) { return [d.x, d.y]; });

var svg = d3.select(""#svgholder"").append(""svg"")
	.attr(""width"", width + margin.right + margin.left)
	.attr(""height"", height + margin.top + margin.bottom)
  .append(""g"")
	.attr(""transform"", ""translate("" + margin.left + "","" + margin.top + "")"");


// load the external data
d3.json(""lib/dtl_algorithm/treeData.json"", function(error, treeData) {
  root = treeData[0];
  update(root);
});

function update(source) {

// Compute the new tree layout.
var nodes = t");
                WriteLiteral(@"ree.nodes(root).reverse(),
	links = tree.links(nodes);

// Normalize for fixed-depth.
nodes.forEach(function(d) { d.y = d.depth * 100; });

// Declare the nodes…
var node = svg.selectAll(""g.node"")
	.data(nodes, function(d) { console.log(d.name + ""\t\t\t\t"" + d.is_link);return d.id || (d.id = ++i); });

// Enter the nodes.
var nodeEnter = node.enter().append(""g"")
	.attr(""class"", ""node"")
	.attr(""transform"", function(d) {
		console.log(""test"");
		return ""translate("" + d.x + "","" + d.y + "")""; });

nodeEnter.append(""circle"")
	.attr(""r"", 5)
	.style(""fill"", ""#fff"");

nodeEnter.append(""text"")
	.attr(""y"", function(d) {
		return d.children || d._children ? -18 : 18; })
	.attr(""dy"", "".35em"")
	.attr(""text-anchor"", ""middle"")
	.text(function(d) { return d.name; })
	.style(""fill-opacity"", 1);

// Declare the links…
var link = svg.selectAll(""path.link"")
	.data(links, function(d) { return d.target.id; });

// Enter the links.
link.enter().insert(""path"", ""g"")
	.attr(""class"", ""link"")
	.attr(""d");
                WriteLiteral("\", diagonal);\r\n\r\n}\r\n\r\n    </script>\r\n\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(2669, 13, true);
            WriteLiteral("\r\n</html>\r\n\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<FloChar.Pages.treedisplayModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<FloChar.Pages.treedisplayModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<FloChar.Pages.treedisplayModel>)PageContext?.ViewData;
        public FloChar.Pages.treedisplayModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
